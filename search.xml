<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kubernetes集群的安装异常汇总]]></title>
    <url>%2F2018%2F10%2F12%2Fkubernetes%E9%9B%86%E7%BE%A4%E7%9A%84%E5%AE%89%E8%A3%85%E5%BC%82%E5%B8%B8%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[kubernetes集群二进制文件安装方式过程中，出现的异常汇总 异常【kubelet cgroup driver：cgroupfs跟docker cgroup driver：systemd不一致】 异常描述 error: failed to run Kubelet: failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgroup driver: “systemd” 启动kubelet时 1234#启动kubeletservice kubelet start#查看kubelet日志journalctl -f -u kubelet 提示如下错误 123410月 11 20:05:18 server03 kubelet[15984]: error: failed to run Kubelet: failed to create kubelet: misconfiguration: kubelet cgroup driver: "cgroupfs" is different from docker cgroup driver: "systemd"10月 11 20:05:18 server03 systemd[1]: kubelet.service: main process exited, code=exited, status=1/FAILURE10月 11 20:05:18 server03 systemd[1]: Unit kubelet.service entered failed state.10月 11 20:05:18 server03 systemd[1]: kubelet.service failed. 原因分析 kubelet文件驱动默认cgroupfs, 而我们安装的docker使用的文件驱动是systemd, 造成不一致, 导致镜像无法启动。 现在有两种方式, 一种是修改docker, 另一种是修改kubelet。 我这里采用修改docker的方式 ==注意==： 网上大部分教程都是说直接修改daemon.json 123456#修改daemon.jsonvi /etc/docker/daemon.json#添加如下属性"exec-opts": [ "native.cgroupdriver=systemd"] 这样会导致修改后，docker无法启动成功，提示daemon.json与/lib/systemd/system/docker.service中native.cgroupdriver=systemd重复存在。 解决方案（修改docker） 1234567891011# 修改前查看docker Cgroup Driver[root@server02 ~]# docker info...Server Version: 1.13.1Storage Driver: overlay2 Backing Filesystem: xfs Supports d_type: true Native Overlay Diff: trueLogging Driver: journaldCgroup Driver: systemd... 12# 修改docker.servicevi /lib/systemd/system/docker.service 1234找到--exec-opt native.cgroupdriver=systemd \修改为：--exec-opt native.cgroupdriver=cgroupfs \ 123# 重启dockersystemctl daemon-reloadsystemctl restart docker 1234567891011# 修改后查看docker Cgroup Driver[root@server03 sysconfig]# docker info...Server Version: 1.13.1Storage Driver: overlay2 Backing Filesystem: xfs Supports d_type: true Native Overlay Diff: trueLogging Driver: journaldCgroup Driver: cgroupfs... 参考链接： http://www.cnblogs.com/hongdada/p/9771857.html 异常【Failed to get system container stats for kubelet.service】 异常描述 failed to get container info for “/system.slice/kubelet.service”: unknown container “/system.slice/kubelet.service” 启动kubelet时 123service kubelet start#查看kubelet日志journalctl -f -u kubelet 提示如下错误 110月 11 19:37:46 server01 kubelet[64872]: E1011 19:37:46.150198 64872 summary.go:92] Failed to get system container stats for "/system.slice/kubelet.service": failed to get cgroup stats for "/system.slice/kubelet.service": failed to get container info for "/system.slice/kubelet.service": unknown container "/system.slice/kubelet.service" 解决方案 12# 修改kubelet.servicevi /lib/systemd/system/kubelet.service 123#在ExecStart位置最后面，添加如下配置--runtime-cgroups=/systemd/system.slice \--kubelet-cgroups=/systemd/system.slice 修改后的/lib/systemd/system/kubelet.service 12345678910111213141516171819202122232425262728293031323334[Unit]Description=Kubernetes KubeletDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=docker.serviceRequires=docker.service[Service]WorkingDirectory=/var/lib/kubeletExecStart=/opt/modules/kubernetes-bins/kubelet \ --address=192.168.1.188 \ --hostname-override=192.168.1.188 \ --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/imooc/pause-amd64:3.0 \ --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \ --network-plugin=cni \ --cni-conf-dir=/etc/cni/net.d \ --cni-bin-dir=/opt/modules/kubernetes-bins \ --cluster-dns=10.68.0.2 \ --cluster-domain=cluster.local. \ --allow-privileged=true \ --fail-swap-on=false \ --logtostderr=true \ --v=2 \ --runtime-cgroups=/systemd/system.slice \ --kubelet-cgroups=/systemd/system.slice#kubelet cAdvisor 默认在所有接口监听 4194 端口的请求, 以下iptables限制内网访问ExecStartPost=/sbin/iptables -A INPUT -s 10.0.0.0/8 -p tcp --dport 4194 -j ACCEPTExecStartPost=/sbin/iptables -A INPUT -s 172.16.0.0/12 -p tcp --dport 4194 -j ACCEPTExecStartPost=/sbin/iptables -A INPUT -s 192.168.0.0/16 -p tcp --dport 4194 -j ACCEPTExecStartPost=/sbin/iptables -A INPUT -p tcp --dport 4194 -j DROPRestart=on-failureRestartSec=5[Install]WantedBy=multi-user.target 参考链接：https://www.cnblogs.com/devilwind/p/8862069.html]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决busuanzi_count突然失效的方法（hexo-theme-next）]]></title>
    <url>%2F2018%2F10%2F09%2F%E8%A7%A3%E5%86%B3busuanzi-count%E7%AA%81%E7%84%B6%E5%A4%B1%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88hexo-theme-next%EF%BC%89%2F</url>
    <content type="text"><![CDATA[2018-09月份的时候，还正常的使用不蒜子统计功能（不蒜子统计功能配置文件已经配置好:themes\next_config.yml）。过完国庆后，看自己的博客突然不蒜子统计失效了，没有统计数量了。 说明我这里是使用的hexo-theme-next主题，主题版本为：5.1.4 原因分析由于定位到是不蒜子统计功能突然有问题了，所以前往不蒜子官网进行查看，发现官网有一段很重要的提示：“因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！”所以定位到问题，原来是不蒜子使用的七牛的域名被强制过期。需要把 dn-lbstatics.qbox.me 域名更换为 busuanzi.ibruce.info 解决方案hexo-theme-next主题中使用了dn-lbstatics.qbox.me域名的文件位置为：themes\next\layout\_third-party\analytics\busuanzi-counter.swig 修改busuanzi-counter.swig1234找到如下代码：&lt;script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;修改为：&lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 重新预览，即可看到不蒜子统计功能已经生效 参考链接：http://ibruce.info/2015/04/04/busuanzi/]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客添加搜索功能]]></title>
    <url>%2F2018%2F09%2F29%2Fhexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[安装插件在自己博客根目录下（我的目录：D:\workspace\hexo），执行如下命令1cnpm install hexo-generator-searchdb --save 修改站点配置文件修改根目录下的_config.yml（我的目录：D:\workspace\hexo_config.yml），在最底部添加如下配置12345search: path: search.xml field: post format: html limit: 10000 修改主题配置文件修改主体下的themes\next_config.yml配置文件（我的目录：D:\workspace\hexo\themes\next_config.yml），搜索local_search，修改enable为true1234567local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 预览效果开启本地server123hexo cleanhexo ghexo s 访问：http://localhost:4000/ ，即可看到想要的搜索功能了]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理方法论-学习技术管理实战36讲笔记-【01-多年前的那些工程师都去哪了】]]></title>
    <url>%2F2018%2F09%2F29%2F%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95%E8%AE%BA-%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%9836%E8%AE%B2%E7%AC%94%E8%AE%B0-%E3%80%9001-%E5%A4%9A%E5%B9%B4%E5%89%8D%E7%9A%84%E9%82%A3%E4%BA%9B%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%83%BD%E5%8E%BB%E5%93%AA%E4%BA%86%E3%80%91%2F</url>
    <content type="text"><![CDATA[工程师的职业发展状况，大体分布在四个大类的八个方向。这四个大类分别是技术类、管理类、创业类和顾问类。 工程师职业发展四个大类 技术类 技术类主要包含两个大方向。 一个方向侧重于“广”，着眼技术的整体性、架构性和业务解决方案，我们姑且称为“架构师”或“首席架构师”。 另外一个方向侧重于“专”，着眼于某个专项技术的深度、专业度和精细度，我们姑且称为“某领域技术专家”或“科学家”，比如图像技术、语音技术、机器学习、推荐算法等等。 管理类 管理类也有两个不同的方向，即技术管理者和职业经理人。你可以认为职业经理人是技术管理者的更成熟阶段，但我更倾向于认为这是两个不同的选择。 技术管理者这个方向很自然，就是从工程师到技术团队的一线经理，再慢慢做到部门经理等二线经理，然后是某个大技术体系或整个技术部的技术副总裁，如果还包括产品、设计等所有“产品交付”类团队，就成为了一个常规意义上的 CTO，但总体上，都是技术管理者。 职业经理人之所以叫职业经理人，是他不限于管理技术类团队，往往负责的是一个完整的业务，很像是这个业务的 CEO，有些公司也会叫 GM（general manager）。这个角色并不限定在具体一个业务，还可以根据公司需要去负责一个新业务，迁移性比较强，比较接近我们常说的“职业经理人”。这样的管理者会关心一个业务经营的方方面面，但本质还是公司高管，在公司整体框架下工作。 创业类 创始人 技术合伙人|技术高管 顾问类 八大方向技能清单 总之，对于技术人来说，无论你是否做技术管理岗，你所有的职业发展，都会围绕着技术和管理这两条腿在走路，一条腿是走不远的。 本书作者： 刘建国 前百度最佳经理人 果见管理工作坊创始人]]></content>
      <categories>
        <category>技术管理</category>
      </categories>
      <tags>
        <tag>技术管理</tag>
        <tag>管理方法论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理方法论-学习技术管理实战36讲笔记-【02-我要不要做管理呢】]]></title>
    <url>%2F2018%2F09%2F29%2F%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95%E8%AE%BA-%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%9836%E8%AE%B2%E7%AC%94%E8%AE%B0-%E3%80%9002-%E6%88%91%E8%A6%81%E4%B8%8D%E8%A6%81%E5%81%9A%E7%AE%A1%E7%90%86%E5%91%A2%E3%80%91%2F</url>
    <content type="text"><![CDATA[我适不适合做管理呢？通过以下三个重要问题，来帮你做个判断 三个重要问题，来帮你做个判断 你是否认同管理的价值？ 认同管理价值观，而不是认为是琐碎的“杂事” 你是否对管理充满热情？ 主动管理，享受管理带来的成就感 你是否看重在管理方面的成长？ 需要有更大的责任 需要有更立体的视角 需要有更灵活的思维方式 管理获得的收获 成长感 你的能力和视野将得到大幅度提升。这会带给你明显的成长感 成就感 你不但能力变强了，你还有团队了，你能搞定更大、更复杂的事情，做出更大的成绩。这会带给你更强的成就感 影响力 你可以带着团队做出越来越多的成就，你的团队也越来越优秀，团队成员都得到了成长，你甚至还会影响到合作团队。你的影响力显著提升了 获得感 你的能力、成绩、影响力全面提升，你得到了更多的精神和物质的回报。你所有的付出、成长和积累，都将或早或晚地换回等值的回馈。你的获得感将得到满足 本书作者： 刘建国 前百度最佳经理人 果见管理工作坊创始人]]></content>
      <categories>
        <category>技术管理</category>
      </categories>
      <tags>
        <tag>技术管理</tag>
        <tag>管理方法论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理方法论-学习技术管理实战36讲笔记-【开篇词-你为什么需要学管理】]]></title>
    <url>%2F2018%2F09%2F29%2F%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95%E8%AE%BA-%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%9836%E8%AE%B2%E7%AC%94%E8%AE%B0-%E3%80%90%E5%BC%80%E7%AF%87%E8%AF%8D-%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%AD%A6%E7%AE%A1%E7%90%86%E3%80%91%2F</url>
    <content type="text"><![CDATA[超过 80% 的技术管理者，都是在没有明确表达管理意愿的情况下，被公司推到管理岗位的。而对于互联网技术人来说，“带团队”不再是一个可选项，而是迟早都要面对的事儿。做技术和带团队，更像是职业发展的两条腿，而不是完全叉开的两条路。 从技术转做管理，都有哪些要注意的地方，都有哪些事情要做，以及应该怎么操作？ 从技术转做管理大家普遍关心的几点 关于 Why 的，比如： “老板让我做管理，我到底要不要做呢？” “管理这条路是否适合我呢，对我个人发展有什么建议吗？” “我不像某某那么适合做管理，我是否还要去尝试呢？” …… 关于 What 的，比如： “管理到底都需要做哪些事呢？” “有没有管理的框架图可以让我按图索骥，做到心中有数呢？” “我做得是否足够，我还应该做哪些工作呢？” …… 关于 How 的，比如： “怎么做团队建设呢？” “怎么提升团队凝聚力呢？” “怎么做向上沟通和向上管理？” “怎么做员工激励？” “怎么应对低绩效员工呢？” …… 管理方法论，主要包含以下5个方面 自我倾听 理顺新经理内心的纠结与彷徨，让你心无旁骛地走上管理之路。 角色认知 了解管理工作所涵盖的方方面面。 管理方法 管理规划、团队建设和任务管理，合称为“管理三部曲”，即“看方向”“带人”和“做事”。 管理沟通 管理沟通的工具和技巧。向上、向下、横向等典型沟通场景下的沟通要点。 管理之路 积累管理方法论。 本书作者： 刘建国 前百度最佳经理人 果见管理工作坊创始人]]></content>
      <categories>
        <category>技术管理</category>
      </categories>
      <tags>
        <tag>技术管理</tag>
        <tag>管理方法论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云centos7服务器增加磁盘]]></title>
    <url>%2F2018%2F09%2F28%2F%E9%98%BF%E9%87%8C%E4%BA%91centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A2%9E%E5%8A%A0%E7%A3%81%E7%9B%98%2F</url>
    <content type="text"><![CDATA[前言 阿里云云服务器现在基本已成主流的云服务器了。我使用的是阿里云centos7。在使用过程中，难免会遇到初始化的磁盘空间不够用，这时候比较好的方案就是扩容服务器磁盘空间创建云盘了。因为如果重新格式化系统盘在重装，那代价还是挺大的。 步骤 创建云盘 创建的云盘，只能采用按量付费方式计费，而且只能作数据盘用。 具体创建云盘的步骤，这里就不记录了，挺简单。 具体操作步骤，查看官方教程：https://help.aliyun.com/document_detail/25445.html?spm=a2c4g.11186623.6.679.46671846M2ayt0 挂载云盘 将单独创建的云盘（作数据盘用）挂载到ECS实例上。您可以选择从实例管理页面挂载云盘，也可以从云盘管理页面挂载云盘。云盘只能挂载到同一地域下同一可用区内的实例上，不能跨可用区挂载。 具体操作步骤，查看官方教程：https://help.aliyun.com/document_detail/25446.html?spm=a2c4g.11186623.6.681.9f343029XcxOt4 格式化和挂载数据盘 这里注意，按照官方教程格式化数据盘后，挂载文件系统时，挂载的目录指定成需要自定义挂载的目录。 因为默认是挂载到/mnt目录的 mount /dev/vdb1 /mnt 我这里挂载的目录是/home 123456789[root@iZbp1jcwx7sfb1yrnvpg84Z ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/vda1 99G 42G 53G 45% /devtmpfs 7.8G 0 7.8G 0% /devtmpfs 7.8G 0 7.8G 0% /dev/shmtmpfs 7.8G 2.8M 7.8G 1% /runtmpfs 7.8G 0 7.8G 0% /sys/fs/cgrouptmpfs 1.6G 0 1.6G 0% /run/user/0/dev/vdb1 197G 27G 161G 15% /home 具体操作步骤，查看官方教程：https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.19.65391846Wl8rWe#concept_jl1_qzd_wdb]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决docker容器存放目录磁盘空间满了问题]]></title>
    <url>%2F2018%2F09%2F28%2F%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8%E5%AD%98%E6%94%BE%E7%9B%AE%E5%BD%95%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%BB%A1%E4%BA%86%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言 docker所在服务器，运行了一段时间后，发现服务器磁盘目录快不够用了。通过du -h --max-depth=1 / 逐级目录排查，发现/var/lib/docker目录文件过大。通过以下方法，解决该问题。 转移数据修改docker默认存储位置 有多种方式修改docker默认存储位置。最好是在docker安装完后，第一时间修改docker默认存储位置为其他大目录或者磁盘中。规避迁移数据过程中造成的风险。 停止docker服务 1systemctl stop docker 创建新的docker目录，执行命令df -h,找一个大的磁盘 我在 /home目录下面建了/home/modules/docker/lib目录 1mkdir -p /home/modules/docker/lib 迁移/var/lib/docker目录下面的文件到/home/modules/docker/lib 迁移后的完成docker路径：/home/modules/docker/lib/docker 1rsync -avz /var/lib/docker/ /home/modules/docker/lib/ 配置 /etc/systemd/system/docker.service.d/devicemapper.conf 查看/etc/systemd/system/docker.service.d目录及devicemapper.conf是否存在。如果不存在，就新建 12mkdir -p /etc/systemd/system/docker.service.d/vi /etc/systemd/system/docker.service.d/devicemapper.conf devicemapper.conf添加如下内容： 123[Service]ExecStart=ExecStart=/usr/bin/dockerd --graph=/home/modules/docker/lib/docker 重启docker 123systemctl daemon-reloadsystemctl restart dockersystemctl enable docker 确认Docker Root Dir修改是否已经生效 1234567[root@iZbp1jcwx7sfb1yrnvpg84Z docker]# docker info...Docker Root Dir: /home/modules/docker/lib/dockerDebug Mode (client): falseDebug Mode (server): falseRegistry: https://index.docker.io/v1/... 启动成功后，再确认之前的镜像是否还在 1234[root@iZbp1jcwx7sfb1yrnvpg84Z docker]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZE10.80.177.233/policy 2.1.2 64ac4e178cd2 2 hours ago 818 MB10.80.177.233/crm 2.1.3 d7636fbb7a29 2 hours ago 762 MB 确定容器没问题后删除/var/lib/docker/目录中的文件 参考链接：https://blog.csdn.net/weixin_32820767/article/details/81196250]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决jenkins运行磁盘满的问题]]></title>
    <url>%2F2018%2F09%2F28%2F%E8%A7%A3%E5%86%B3jenkins%E8%BF%90%E8%A1%8C%E7%A3%81%E7%9B%98%E6%BB%A1%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言 jenkins服务器，运行了一段时间后，发现服务器磁盘目录快不够用了。通过du -h --max-depth=1 / 逐级目录排查，发现/var/lib/jenkins目录文件过大。通过以下两种方法，解决该问题。 优化方案 自动丢弃构建历史数据 把以前构建过的过时历史数据自动清除掉，保留最近更新的天数和个数,根据个人需求保留。如下图 更改jenkins默认目录 我这里之前的jenkins已经配置好并运行了一段时间，并不想重装jenkins。所以需要转移jenkins目录，把默认目录/var/lib/jenkins，更改到其他大目录或者磁盘中。我这的环境是用的阿里云centos7，我把默认目录转移到/home/modules下 把/var/lib/jenkins拷贝到/home/modules下 123cp -r /var/lib/jenkins /home/modules#因为是在root用户下操作的，所以需要更改目录所属用户为默认用户jenkinschown -R jenkins:jenkins /home/modules/jenkins 修改/etc/init.d/jenkins的jenkins目录 1DAEMON_ARGS="--name=$NAME --inherit --env=JENKINS_HOME=/home/modules/jenkins --output=$JENKINS_LOG --pidfile=$PIDFILE" 修改/etc/sysconfig/jenkins文件 1vi /etc/sysconfig/jenkins 修改文件中的JENKINS_HOME，把JENKINS_HOME=”/var/lib/jenkins”改成JENKINS_HOME=”/home/modules/jenkins” 修改内容： 12#JENKINS_HOME="/var/lib/jenkins"JENKINS_HOME="/home/modules/jenkins" 修改/etc/passwd中的jenkins 把其中的Server:/var/lib/jenkins改成/home/modules/jenkins 123vi /etc/passwd修改后的内容如下：jenkins:x:994:991:Jenkins Automation Server:/home/modules/jenkins:/bin/false 重启jenkins 1service jenkins restart 可能出现的问题如果jenkins安装的maven、gradle是用的自动安装的方式，需要手动在勾选下“自动安装”，在保存，让其进行重新安装。因为默认安装的目录是在/var/lib/jenkins下。 参考链接：https://blog.csdn.net/ling811/article/details/74991899]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7上安装docker]]></title>
    <url>%2F2018%2F09%2F27%2FCentos7%E4%B8%8A%E5%AE%89%E8%A3%85docker%2F</url>
    <content type="text"><![CDATA[docker安装 在线安装 1yum install docker 启用服务 1systemctl start docker 开机启动 1systemctl enable docker 查看链接： https://www.cnblogs.com/yufeng218/p/8370670.html 常见问题 docker运行镜像的时候，提示：docker-runc not installed on system 123456789[root@iZbp1jcwx7sfb1yrnvpg84Z docker]# docker run hello-worldshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directoryUnable to find image 'hello-world:latest' locallyTrying to pull repository docker.io/library/hello-world ... sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788: Pulling from docker.io/library/hello-worldd1725b59e92d: Pull complete Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788Status: Downloaded newer image for docker.io/hello-world:latest/usr/bin/docker-current: Error response from daemon: shim error: docker-runc not installed on system. 解决方案： 12[root@iZbp1jcwx7sfb1yrnvpg84Z docker]# cd /usr/libexec/docker/[root@iZbp1jcwx7sfb1yrnvpg84Z docker]# ln -s docker-runc-current docker-runc 参考链接：https://www.cnblogs.com/cxbhakim/p/8862758.html docker运行镜像的时候，提示：exec: “docker-proxy”: executable file not found in $PATH 123[root@iZbp1jcwx7sfb1yrnvpg84Z docker]# docker run -d -p 5000:5000 -v /home/datas/registry:/var/lib/registry registryacae4d30d40cdb209d86377505bab5215ef37c66a863033b16909719e1c76a53/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint agitated_engelbart (7f225ce7048177e8ee4c5d77161bcf9d8bcc2597ea8307d1a10bcc3c9b20a4d3): exec: "docker-proxy": executable file not found in $PATH. 解决方案： 12[root@iZbp1jcwx7sfb1yrnvpg84Z bin]# cd /usr/libexec/docker/[root@iZbp1jcwx7sfb1yrnvpg84Z docker]# ln -s docker-proxy-current docker-proxy 参考链接：https://blog.csdn.net/hellofyy/article/details/80091635 docker运行镜像的时候，提示：Bind for 0.0.0.0:5000 failed: port is already allocated 调试这个问题花费了好长时间，因为无法通过netstat以及lsof看到究竟是什么应用占用了程序；后来我才发现原来是因为docker的原因；如果docker被run了两次 123[root@iZbp1jcwx7sfb1yrnvpg84Z docker]# docker run -d -p 5000:5000 -v /home/datas/registry:/var/lib/registry registryd6e57a3ed2bad6671df31acdc83cd32b9b6a136d2874ed34b77c99e37a858177/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint ecstatic_goldstine (2521adff22666e908e773d6288ca03a30229aade2a1d68e8fcb250254fdc3353): Bind for 0.0.0.0:5000 failed: port is already allocated. 第一次失败，那么这个端口将会被一直占用，即使docker容器并没有创建。 解决方案： 12#重启docker服务service docker restart 也有人说要sudo rm /var/lib/docker/network/files/local-kv.db，但是在我看来并不需要 参考链接：https://www.cnblogs.com/xiashiwendao/p/7859815.html 删除镜像时，提示：image is referenced in multiple repositories解决方案：删除时可以用repository和tag的方式来删除参考链接：https://blog.csdn.net/u013258415/article/details/80051082]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-rancher搭建]]></title>
    <url>%2F2018%2F09%2F22%2Fdocker-rancher%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[环境说明 linux：centos7 dockerDocker version 1.13.1, build dded712/1.13.1 rancher：v1.6.18 本环境搭建需要先安装docker，docker安装这里不写了，大家自行百度吧。 创建MySQL容器 创建挂载目录 1mkdir -p /opt/datas/mysql/&#123;datadir,conf.d,logs&#125; 创建mysql容器,设置密码123456 1234docker run --name mysqldb -p 3306:3306 \ -v /opt/datas/mysql/datadir:/var/lib/mysql \ -v /opt/datas/mysql/conf.d:/etc/mysql/conf.d \ -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 查询测试 1docker exec -it mysqldb mysql -p123456 -e "show databases;" 返回如下信息说明mysql数据库初始化成功： 12345678910mysql: [Warning] Using a password on the command line interface can be insecure.+--------------------+| Database |+--------------------+| information_schema || cattle || mysql || performance_schema || sys |+--------------------+ 创建库并授权(库,用户,密码都为cattle) 12345docker exec -it mysqldb mysql -p123456 -e " create database if not exists cattle collate = 'utf8_general_ci' character set = 'utf8'; grant all on cattle.* to 'cattle'@'%' identified by 'cattle'; grant all on cattle.* to 'cattle'@'localhost' identified by 'cattle'; flush privileges;show databases;" 运行mysql容器，提示如下错误： 解决方法：关闭linux selinux 查看：https://blog.csdn.net/lijiqidong/article/details/78482908 创建rancher容器 运行rancher容器 mysql机器IP：mysql容器所在的机器IP 1234docker run -d --name rancher --link=mysqldb:db \--restart=unless-stopped -p 8080:8080 -p 9345:9345 rancher/server:latest \--db-host db --db-port 3306 --db-user cattle --db-pass cattle --db-name cattle \--advertise-address mysql机器IP 等几分钟,当数据表创建超过100张时,可以打开浏览器访问rancher web管理页面了。 查询cattle数据库中表的数量，显示为109时安装完成 12#查询cattle数据库中表的数量docker exec -it mysqldb mysql -u"cattle" -h localhost -p"cattle" -e "use cattle;show tables;" |wc -l rancher web管理页面 访问：http://主机IP:8080 添加主机(节点)基础架构——主机——添加主机(保存)——复制第5部代码，在需要管理的docker机器节点执行。 访问控制系统管理–访问控制–开启访问控制 参考链接：https://www.cnblogs.com/elvi/p/8478551.html]]></content>
      <categories>
        <category>rancher</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>rancher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hadoop-2.5.0-cdh5.3.6集群搭建]]></title>
    <url>%2F2018%2F09%2F22%2Fhadoop-2-5-0-cdh5-3-6%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装环境说明 操作系统：CentOS 7 hadoop版本：hadoop-2.5.0-cdh5.3.6.tar.gz jdk版本：jdk 1.7 安装用户：root 相关软件下载 https://pan.baidu.com/s/1drI1TO 机器与服务规划 机器规划 hostname sparkproject1 sparkproject2 sparkproject3 内存 32G 16G 16G 服务规划 hostname sparkproject1 sparkproject2 sparkproject3 HDFS NameNode、SecondaryNameNode DataNode DataNode YARN ResourceManager NodeManager NodeManager 安装hadoop包 下载hadoop-2.5.0-cdh5.3.6.tar.gz安装目录为：/usr/local将下载的hadoop-2.5.0-cdh5.3.6.tar.gz，上传到/usr/local目录下。 将hadoop包进行解压缩 1tar -zxvf hadoop-2.5.0-cdh5.3.6.tar.gz 对hadoop目录进行重命名 1mv hadoop-2.5.0-cdh5.3.6 hadoop 配置hadoop相关环境变量 1234567#配置环境变量vi ~/.bashrc#添加hadoop环境变量export HADOOP_HOME=/usr/local/hadoopexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin#使配置的环境变量生效source ~/.bashrc 创建/usr/local/data目录 1mkdir /usr/local/data 测试是否配置成功 12hadoop versionyarn version 修改配置文件 以下配置文件在：/usr/local/hadoop/etc/hadoop/目录下 修改core-site.xml 1234&lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://sparkproject1:9000&lt;/value&gt;&lt;/property&gt; 属性说明： fs.default.name：配置hdfs地址 修改hdfs-site.xml 12345678910111213141516&lt;property&gt; &lt;name&gt;dfs.name.dir&lt;/name&gt; &lt;value&gt;/usr/local/data/namenode&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;dfs.data.dir&lt;/name&gt; &lt;value&gt;/usr/local/data/datanode&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;dfs.tmp.dir&lt;/name&gt; &lt;value&gt;/usr/local/data/tmp&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;2&lt;/value&gt;&lt;/property&gt; 属性说明： dfs.replication：hdfs副本数。 总共3个节点，1个master，2个slave。所以设置成2个block副本 修改mapred-site.xml 重命名mapred-site.xml.template为mapred-site.xml 1234&lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt; 修改yarn-site.xml 12345678&lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt; &lt;value&gt;sparkproject1&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt;&lt;/property&gt; 修改slaves文件 12sparkproject2sparkproject3 在另外两台机器上搭建hadoop 使用如上sparkproject1上配置hadoop，在另外两台机器上搭建hadoop。可以使用scp命令将sparkproject1上面的hadoop安装包和~/.bashrc配置文件都拷贝到sparkproject2、sparkproject3。 将sparkproject1上的hadoop复制到sparkproject2 在sparkproject1上执行 123cd /usr/localscp -r hadoop root@sparkproject2:/usr/localscp ~/.bashrc root@sparkproject2:~/ 复制成功后sparkproject2上的hadoop： 在sparkproject2上执行 1234#对.bashrc文件进行source，以让它生效。source ~/.bashrc#创建data目录。mkdir /usr/local/data 将sparkproject1上的hadoop复制到sparkproject3 按照上面同样的步骤，同样的方式将sparkproject1上面的hadoop安装包和~/.bashrc配置文件都拷贝到sparkproject3。 测试sparkproject2、sparkproject3是否配置成功 在sparkproject2、sparkproject3分别执行如下命令： 12hadoop versionyarn version 启动hdfs集群 格式化namenode 在sparkproject1上执行以下命令 1hdfs namenode -format 启动hdfs集群 1start-dfs.sh 验证启动是否成功 sparkproject1：namenode、secondarynamenode sparkproject2：datanode sparkproject3：datanode hdfs管理界面： http://sparkproject1:50070 测试hdfs 1hdfs dfs -put hello.txt /hello.txt 启动yarn集群 启动yarn集群 1start-yarn.sh 验证启动是否成功 sparkproject1：resourcemanager sparkproject2：nodemanager sparkproject3：nodemanager yarn管理界面 http://sparkproject1:8088/]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>hdfs</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用docker-compose构建elasticsearch集群]]></title>
    <url>%2F2018%2F09%2F21%2F%E4%BD%BF%E7%94%A8docker-compose%E6%9E%84%E5%BB%BAelasticsearch%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[环境说明 linux：centos7 elasticsearch：5.6.4 elasticsearch-head：5 目录结构项目源码下载12345678910elasticsearch/├── docker-compose.yml├── head└── node ├── es1 │ ├── data │ └── elasticsearch.yml └── es2 ├── data └── elasticsearch.yml 主节点elasticsearch.yml配置文件elasticsearch/node/es1/elasticsearch.yml 12345678910network.bind_host: 0.0.0.0cluster.name: elasticsearch_clustercluster.routing.allocation.disk.threshold_enabled: falsenode.name: masternode.master: truenode.data: truehttp.cors.enabled: truehttp.cors.allow-origin: "*"network.host: 0.0.0.0discovery.zen.minimum_master_nodes: 1 从节点elasticsearch.yml配置文件elasticsearch/node/es2/elasticsearch.yml 1234567891011network.bind_host: 0.0.0.0cluster.name: elasticsearch_clustercluster.routing.allocation.disk.threshold_enabled: falsenode.name: node2node.master: falsenode.data: truehttp.cors.enabled: truehttp.cors.allow-origin: "*"network.host: 0.0.0.0discovery.zen.minimum_master_nodes: 1discovery.zen.ping.unicast.hosts: es1 docker-compose.yml配置文件1234567891011121314151617181920212223242526272829303132333435363738394041version: '2.0'services: elasticsearch-central: image: elasticsearch:5.6.4 container_name: es1 volumes: - /opt/modules/elasticsearch/node/es1/data:/usr/share/elasticsearch/data - /opt/modules/elasticsearch/node/es1/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml environment: - "ES_JAVA_OPTS=-Xms512m -Xmx512m" - ES_CLUSTERNAME=elasticsearch command: elasticsearch ports: - "9200:9200" - "9300:9300" elasticsearch-data: image: elasticsearch:5.6.4 container_name: es2 volumes: - /opt/modules/elasticsearch/node/es2/data:/usr/share/elasticsearch/data - /opt/modules/elasticsearch/node/es2/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml environment: - bootstrap.memory_lock=true - "ES_JAVA_OPTS=-Xms512m -Xmx512m" - ES_CLUSTERNAME=elasticsearch command: elasticsearch ports: - "9201:9200" - "9301:9300" links: - elasticsearch-central:elasticsearch elasticsearch-head: image: mobz/elasticsearch-head:5 container_name: head volumes: - /opt/modules/elasticsearch/head/Gruntfile.js:/usr/src/app/Gruntfile.js - /opt/modules/elasticsearch/head/_site/app.js:/usr/src/app/_site/app.js ports: - "9100:9100" links: - elasticsearch-central:elasticsearch 配置head 下载elasticsearch-head123cd elasticsearchgit clone git://github.com/mobz/elasticsearch-head.gitmv elasticsearch-head head 下载下来的代码结构如下： elasticsearch\head\Gruntfile.js修改以下片段 1234567891011connect: &#123; server: &#123; options: &#123; /* 默认监控：127.0.0.1,修改为：0.0.0.0 */ hostname: '0.0.0.0', port: 9100, base: '.', keepalive: true &#125; &#125;&#125; elasticsearch\head\_site\app.js修改以下代码片段 12* 修改localhost为elasticsearch集群地址，Docker部署中，一般是elasticsearch宿主机地址 */this.base_uri = this.config.base_uri || this.prefs.get("app-base_uri") || "http://localhost:9200"; 启动 运行elasticsearch需要vm.max_map_count至少需要262144内存 123456切换到root用户修改配置sysctl.confvi /etc/sysctl.conf在尾行添加以下内容 vm.max_map_count=262144并执行命令sysctl -p elk启动的时候可能会提示如下错误:max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 启动es12docker-compose up 启动docker-compose down 关闭 测试elasticsearch-head可视化页面：http://es所在机器IP:9100 参考链接：https://www.jianshu.com/p/a26c8c7226d7https://blog.csdn.net/sinat_31908303/article/details/80496349https://blog.csdn.net/ggwxk1990/article/details/78698648]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo theme-next主题设置]]></title>
    <url>%2F2018%2F09%2F20%2Fhexo-theme-next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言 由于hexo已经搭建好，并且是用的next主体。这里主要介绍下，next主题相关的一些优化配置。 读者可以在 https://hexo.io/themes/ 可以查看你喜欢的主题。 这里主要介绍NexT主题的相关配置。其他主题可以多看看官方文档。 安装主题安装的过程就一行代码，你需要在博客根目录出打开命令行输入以下命令： 1git clone https://github.com/theme-next/hexo-theme-next themes / next 启用主题修改站点配置文件_config.yml（D:\workspace\hexo_config.yml）1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 选择 Scheme：Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 Gemini - 左侧网站信息及目录，块+片段结构布局cheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有四行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。 设置语言编辑站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下： 1language: zh-Hans 主页文章加阴影打开\themes\next\source\css_custom\custom.styl,向里面加入： 12345678// 主页文章添加阴影效果.post &#123;margin-top: 60px;margin-bottom: 60px;padding: 25px;-webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);-moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 设置网站图标默认的网站图标是一个N，当然是需要制定一个图了，在网上找到图后，将其放在/themes/next/source/images里面，然后在主题配置文件中修改下图所示图片位置 1234567favicon: #small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next-docker.jpg #apple_touch_icon: /images/apple-touch-icon-next.png #safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 设置侧边栏头像编辑主题的 \themes\next_config.yml，新增字段 avatar， 值设置成头像的链接地址。 1avatar: /images/java.jpg 设定代码高亮主题NexT使用Tomorrow Theme作为代码高亮，共有5款主题供你选择:normal | night | night eighties | night blue | night bright,默认使用的是白色的normal编辑站点的_config.yml：12345highlight: enable: true line_number: true auto_detect: true tab_replace: 编辑主题的\themes\next_config.yml：1highlight_theme: night 页面访客统计 在使用该配置之前，你需要先确保自己使用的Hexo博客的NexT主题。旧版的NexT主题可能不支持改配置，在进行进一步的操作之前，确保自己使用的NexT版本支持对应功能。在这里，我使用的版本为5.1.4，你可以通过查看/theme/next/_config.yml文件搜索“version”来确认自己的NexT版本。 页面底部总访客|总访问量配置打开/theme/next/_config.yml，找到如下的配置项：123456789101112131415busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt;总访客 site_uv_footer: 人 # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt;总访问量 site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt; page_pv_footer: 将enable的值由false修改为true后，重新部署即可看到效果。我这里添加了：总访客、总访问量对应的汉字描述。在你完成部署后，本地预览可能你会发现，自己网站的PV数和UV数都非常大，如下所以：这是正常情况，因为使用不蒜子统计的用户都使用同一个存储空间，如果你的URL和别人重复，就会出现数据量异常。这样的情况一般出现在你使用localhost:4000访问自己在本地部署的网页的时候。hexo d部署后，通过域名访问既不会出现这样的情况。参考链接：https://lfwen.site/2016/11/13/next-busuanzi-vistor-count 百度统计 配置好后，到百度统计管理系统中不会立刻有效果，需要等待一会，才会看到如下效果 参考链接：https://blog.csdn.net/u013066244/article/details/71056834 阅读次数使用leancloud实现，效果如下： 参考链接：https://lfwen.site/2016/05/31/add-count-for-hexo-next/]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装Nginx]]></title>
    <url>%2F2018%2F09%2F20%2F%E5%AE%89%E8%A3%85Nginx%2F</url>
    <content type="text"><![CDATA[安装前一定要注意当前centos系统的版本，只有版本一一对应才能安装成功简书地址：https://www.jianshu.com/u/cfd6f3a8ae30 下载对应当前系统版本的nginx包(package)1wget http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 建立nginx的yum仓库1rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm 下载并安装nginx1yum install nginx 启动nginx服务1systemctl start nginx 该错误是提示，当前80端口已经被占用，不用重复绑定该端口。这里可能是因为之前tomcat已经启动了，占用了80端口了，需要关闭之前的80端口。在重新启动nginx 查看nginx状态1systemctl status nginx.service 配置默认的配置文件在 /etc/nginx 路径下，使用该配置已经可以正确地运行nginx；如需要自定义，修改其下的 nginx.conf 等文件即可。 更新conf文件后直接reload，不用重启1nginx -s reload 测试在浏览器地址栏中输入部署nginx环境的机器的IP，如果一切正常，应该能看到如下字样的内容。 访问如果页面出现：An error occurred则进入 /var/log/nginx/ 查看error.log]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker常用命令]]></title>
    <url>%2F2018%2F09%2F20%2Fdocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[docker常用命令启动docker1systemctl start docker 查看docker启动状态 1systemctl status docker 查看镜像 1docker images 查看所有容器包括停止运行的 1docker ps -a 启动所有容器1docker start $(docker ps -a -q) 停止容器1docker stop gitlab-redis 删除所有已经停止的容器 1docker rm $(docker ps -a -q) 删除镜像 需要先停止关联的容器 删除该容器 docker rm 容器ID（CONTAINER ID） 删除镜像 docker rmi 镜像ID（IMAGE ID）查看：https://blog.csdn.net/winy_lm/article/details/77980529 批量删除名字包含”none”关键字的镜像 docker rmi $(docker images | grep “none” | awk ‘{print $3}’) 查看指定容器log1docker logs 容器名称(NAMES) docker监控容器使用资源的情况查看容器使用的资源情况 docker stats 命令用来显示容器使用的系统资源。不带任何选项执行 docker stats 命令：1docker stats 默认情况下，stats 命令会每隔 1 秒钟刷新一次输出的内容直到你按下 ctrl + c。下面是输出的主要内容：[CONTAINER]：以短格式显示容器的 ID。[CPU %]：CPU 的使用情况。[MEM USAGE / LIMIT]：当前使用的内存和最大可以使用的内存。[MEM %]：以百分比的形式显示内存使用情况。[NET I/O]：网络 I/O 数据。[BLOCK I/O]：磁盘 I/O 数据。[PIDS]：PID 号。 只返回当前的状态 如果不想持续的监控容器使用资源的情况，可以通过 –no-stream 选项只输出当前的状态： 1docker stats --no-stream 只输出指定的容器如果我们只想查看个别容器的资源使用情况，可以为 docker stats 命令显式的指定目标容器的名称或者是 ID： 1docker stats --no-stream registry 1493 当有很多的容器在运行时，这样的结果看起来会清爽一些。这里的 registry 和 1493 分别是容器的名称和容器的 ID。注意，多个容器的名称或者是 ID 之间需要用空格进行分割 显示容器名称 1docker stats $(docker ps --format=&#123;&#123;.Names&#125;&#125;) 显示容器名称，且只返回当前的状态 1docker stats $(docker ps --format=&#123;&#123;.Names&#125;&#125;) 查看链接：https://www.cnblogs.com/sparkdev/p/7821376.html]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github从0到1搭建免费个人博客]]></title>
    <url>%2F2018%2F09%2F19%2Fhexo-github%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本教程详细记录了使用hexo+github从0到1搭建免费个人博客简书地址：https://www.jianshu.com/u/cfd6f3a8ae30 基础环境搭建 安装node.jsnode版本： 12C:\Users\Administrator&gt;node -vv8.11.1 安装gitgit版本： 12C:\Users\Administrator&gt;git --versiongit version 2.9.0.windows.1 选装cnpm淘宝cnpm官网。由于npm国内下载速度经常抽风，所以建议安装淘宝的这个镜像；使用方法就是在命令中把npm换成cnpm即可。 1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装Hexo及其相关插件 全局安装Hexo 1cnpm install hexo-cli -g 装完成后输入hexo -v，出现版本信息则表示安装成功。 在项目中安装Hexo在自定义目录（D:\workspace），新建hexo文件夹，然后输入cd hexo（进入该文件夹），在依次执行如下操作12hexo init #这个时间也会比较长，也有可能要等几分钟，有显示 WARN 也不用管cnpm install #有显示 WARN 也不用管 安装完成之后，D:\workspace\hexo 目录结构是这样的： 安装hexo的插件12cnpm install hexo-server --save #搭建本地服务器所需插件cnpm install hexo-deployer-git --save #使用git方式进行部署博客所需插件 在本地生成博客静态页面并预览 在本地生成静态页面 1hexo generate 会生成一个存放静态文件的文件夹public，其简写形式为hexo g； 启动本地服务器1hexo server 其简写形式为hexo s；这条指令运行完成后可在本地启动服务器并预览博客，默认网址为：http://localhost:4000/如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。 创建Github pages并SSH授权 创建仓库首先要有自己的Github账号，没有的可以到GitHub官网注册账号，注册完后，我们来下一步，在我们的GitHub上面右上角的New repository来创建一个仓库。 仓库名必须遵守相应格式：github_username.github.io， 这样子在访问主页的时候直接用：github_username.github.io就能访问。 我这里因为是已经创建了一个仓库了，所以会有提示，然后点Create repository确定创建仓库。 本地生成ssh密钥创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github上 git bash命令行下输入ssh-keygen -t rsa -C ‘你的邮箱地址’，然后回车，回车，再回车，一共 3 次回车。 此时，生成密钥后，在你电脑目录：C:\Users\你的计算机用户名.ssh 下，会生成两个文件：私钥：id_rsa公钥：id_rsa.pub 现在用记事本打开 id_rsa.pub，复制文件中的所有内容访问：https://github.com/settings/ssh ，点击添加新秘钥(New SSH key)，效果如下图Title：自己随便取Key：把刚刚复制的都粘贴进来 本地博客同步到GitHub上这一步其实就是把本地生成的博客内容（静态页面）放到GitHub新建成的仓库qijian0503.github.io中。 编辑博客配置文件: _config.yml在hexo根目录（也就是D:\workspace\hexo文件夹）下找到_config.yml文件，把其中的deploy参数（没有的话就按如下格式新建，注意冒号后面一定要有一个空格），修改为（你需要认真看的是含有中文注释的内容）： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site，这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的title: qijian技术栈subtitle: 记录所有技术相关description: 技术栈keywords:author: qijianlanguage: zh-Hanstimezone:# URL，这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://geekstar.siteroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape# Deployment## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:qijian0503/qijian0503.github.io.git branch: master 重新部署在博客根目录下打开Git Bash，依次执行如下Hexo命令： 123hexo clean #会清除缓存文件db.json及之前生成的静态文件夹public；hexo g #会重新生成静态文件夹public；hexo deploy #因为之前已经安装了插件并且在博客配置文件中也配置好了，所以这个命令会在博客根目录下生成一个.deploy_git的文件夹，并 把本地生成的静态文件部署到qijian0503.github.io这个仓库中的master分支上；简写形式为hexo d； hexo g 和 hexo d可以合并在一起写：hexo g -d 执行：hexo deploy，有弹出下面提示框，请输入：yes提交成功效果如下： 在浏览器中访问博客在浏览器中输入 qijian0503.github.io（可能你已经发现了，这个就是之前新建仓库的名字，同时也是你博客的域名），即可以再次看到那个熟悉又亲切的博客页面了。 至此，我们已经通过Hexo创建了一个最原始的博客，并且通过把博客静态文件放到GitHub的仓库中，实现了从网上以GitHub的默认域名访问这个博客。接下来要做的就是要锦上添花了：换个好看的主题；自定义博客的域名；操作及优化博客。 更换主题更换主题主要是两步，先下载主题然后放到博客中的themes文件夹（专门用来存放主题）下，再修改主题的配置文件_config.yml中相关参数，启用themes文件夹下新增的主题。这里用Next主题做示例。 下载Next主题。进入 hexoBlog/themes 文件夹中，打开Git Bash面板，输入： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 把主题包克隆到themes文件夹中即可。 启用主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开themes下的主题配置文件_config.yml， 找到 theme 字段，并将其值更改为 next（注意冒号后面要留一个 空格）。 验证主题清除并重新生成hexo静态文件，启动本地服务器，然后通过 http://localhost:4000/ 预览博客：123hexo clean #清除静态文件hexo g #重新生成静态文件hexo s #启动服务器 如果网络没问题，通过域名访问你的博客也可以看到刚换的新主题了。关于更换Next主题的详细介绍，也可访问Next中文官网 配置自定义域名 注册域名域名注册商可选择阿里云等平台进行注册，.site|.top后缀域名都很便宜。这里就不记录了，大家自信去注册吧。 新建CNAME文件 新建一个CNAME文件（文件名叫 CNAME，没有文件后缀的），把该文件放在 D:\workspace\hexo\source 目录下CNAME 上的内容需要写你具体要绑定的域名信息 依次执行123hexo clean hexo g hexo d 域名解析设置查看github空间服务IP：ping www.qijian0503.github.io登录阿里云【域名-点击域名列表中的域名-域名解析】进入域名的解析后台，添加如下两条解析记录：设置好之后，等过几分钟域名解析好之后，我们访问：http://www.geekstar.site ，即可通过域名访问到你的博客了。 博客操作 新建文章 1hexo new post 背影 执行上面命令会新建一篇名为‘背影’的文章，源文件会自动生成到hexoBlog/source/_post 路径下，后缀为点md ，直接打开编辑就可以了。编辑完保存，然后再依次执行123hexo clean hexo g hexo d 在博客就可以看到你的文章了（有时候网络问题生成会比较慢，需要等几分钟才可以看到）。 新建页面新建标签、分类、关于我等各种页面，并在博客的菜单栏中显示。这里以新建‘标签’页面来做示范。 创建页面 1hexo new page 'tags' 会在hexoBlog/source路径下自动生成一个名为tags的文件夹，里面包含一个index.md的文件，在这个文件中添加对应的页面类型type: tags：12345---title: tagsdate: 2018-09-16 16:20:05type: "tags"--- 把页面路径添加到菜单中。编辑主题配置文件（themes/_config.yml）,找到munu字段，添加tag: /tags（格式为item_name: link），如下：123menu: home: / tag: /tags #‘标签’’页面的路径 参考链接：https://blog.csdn.net/weixin_39345384/article/details/80787998https://blog.csdn.net/qq_32454537/article/details/79482896https://www.jianshu.com/p/21c94eb7bcd1https://blog.csdn.net/linshuhe1/article/details/52424573https://www.jianshu.com/p/1c98aed8d92ehttps://www.jianshu.com/p/ea5ac6162a96https://blog.csdn.net/u011976726/article/details/78217467https://www.cnblogs.com/wanghuaijun/p/7073296.htmlhttps://www.cnblogs.com/zhangqie/p/7978394.html]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker ELK+Filebeat安装与配置]]></title>
    <url>%2F2018%2F09%2F16%2FDocker-ELK-Filebeat%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[环境说明 linuxCentOS Linux release 7.5.1804 (Core) dockerDocker version 1.13.1 elksebp/elk latest filebeatfilebeat-6.4.0 elk跟filebeat在同一台机器上 架构 Elasticsearch一个近乎实时查询的全文搜索引擎。Elasticsearch 的设计目标就是要能够处理和搜索巨量的日志数据。 Logstash读取原始日志，并对其进行分析和过滤，然后将其转发给其他组件（比如 Elasticsearch）进行索引或存储。Logstash 支持丰富的 Input 和 Output 类型，能够处理各种应用的日志。 Kibana一个基于 JavaScript 的 Web 图形界面程序，专门用于可视化 Elasticsearch 的数据。Kibana 能够查询 Elasticsearch 并通过丰富的图表展示结果。用户可以创建 Dashboard 来监控系统的日志。 Filebeat引入Filebeat作为日志搜集器，主要是为了解决Logstash开销大的问题。相比Logstash，Filebeat 所占系统的 CPU 和内存几乎可以忽略不计。 日志处理流程：Filebeat将日志发送给Logstash进行分析和过滤，然后由Logstash转发给Elasticsearch，最后由Kibana可视化Elasticsearch 的数据 安装 ELK 套件ELK 的部署方案可以非常灵活，在规模较大的生产系统中，ELK 有自己的集群，实现了高可用和负载均衡。我们的目标是在最短的时间内学习并实践 ELK，因此将采用最小部署方案：在容器中搭建 ELK。 运行ELK镜像需要vm.max_map_count至少需要262144内存 123456切换到root用户修改配置sysctl.confvi /etc/sysctl.conf在尾行添加以下内容 vm.max_map_count=262144并执行命令sysctl -p elk启动的时候可能会提示如下错误:max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]查看容器日志：docker logs 容器ID参考链接：https://blog.csdn.net/jiankunking/article/details/65448030 安装docker 123456在线安装吧，如果自定义安装请搜索下安装方法，这里就不再描述了yum install docker 启用服务systemctl start docker开机启动systemctl enable docker 运行ELK镜像 1sudo docker run -p 5601:5601 -p 9200:9200 -p 5044:5044 -it --name elk sebp/elk 配置logstash 1234567891011查看容器信息docker ps -a进入容器sudo docker exec -it elk /bin/bash或sudo docker exec -it 容器ID /bin/bash修改02-beats-input.confcd /etc/logstash/conf.d/vi 02-beats-input.conf /etc/logstash/conf.d/02-beats-input.conf修改成如下图所示： 这里vi命令使用有点问题，我是通过DEL键一行一行的删掉了那3行的 将以下三行删除掉。这三行的意思是是否使用证书，本例是不使用证书的，如果你需要使用证书，将logstash.crt拷贝到客户端，然后在filebeat.yml里面添加路径即可 123ssl =&gt; true ssl_certificate =&gt; "/pki/tls/certs/logstash.crt"ssl_key =&gt; "/pki/tls/private/logstash.key" 注意：sebp/elk docker是自建立了一个证书logstash.crt，默认使用*通配配符，如果你使用证书，filebeat.yml使用的服务器地址必须使用域名，不能使用IP地址，否则会报错 这里如果不去掉这三行配置的话，在后面启动filebeat时，会提示如下错误：1232018-09-12T10:01:29.770+0800 ERROR logstash/async.go:252 Failed to publish events caused by: lumberjack protocol error2018-09-12T10:01:29.775+0800 ERROR logstash/async.go:252 Failed to publish events caused by: client is not connected2018-09-12T10:01:30.775+0800 ERROR pipeline/output.go:109 Failed to publish events: client is not connected 重启elk容器 1docker restart 容器ID kibana可视化页面 在浏览器输入：http://ip:5601 ，稍等一会即可看到kibana启动成功管理页面 Elasticsearch的JSON接口：http://[Host IP]:9200/_search?pretty 安装Filebeat filebeat有多种安装方式，我这里采用rpm包的安装方式，可自动注册为systemd的服务 下载filebeat的rpm包12cd /opt/softwareswget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.4.0-x86_64.rpm 或者到官网查看最新版本直接下载：https://www.elastic.co/downloads/beats/filebeat 安装filebeat 1rpm -ivh filebeat-6.4.0-x86_64.rpm 配置filebeat 12cd /etc/filebeatvi filebeat.yml 配置改成如下所示： 123456789101112131415#=========================== Filebeat inputs =============================filebeat.inputs:- type: log enabled: true paths: - /opt/datas/logs/*/*.log tags: ["测试环境"] multiline: pattern: '^\s*(\d&#123;4&#125;|\d&#123;2&#125;)\-(\d&#123;2&#125;|[a-zA-Z]&#123;3&#125;)\-(\d&#123;2&#125;|\d&#123;4&#125;)' # pattern: '^\s*("&#123;)' negate: true match: after max_lines: 1000 timeout: 30s enabled：filebeat 6.0后，enabled默认为关闭，必须要修改成truepaths：为你想要抓取分析的日志所在路径multiline：如果不进行该合并处理操作的话，那么当采集的日志很长或是像输出xml格式等日志，就会出现采集不全或是被分割成多条的情况pattern：配置的正则表达式，指定匹配的表达式（匹配以 2017-11-15 08:04:23:889 时间格式开头的字符串），如果匹配不到的话，就进行合并行。参考链接 配置改为上图所示。注释掉Elasticsearch output，开启Logstash output。hosts：elk所在机器IP地址如果直接将日志发送到Elasticsearc，请编辑此行：Elasticsearch output如果直接将日志发送到Logstash，请编辑此行：Logstash output只能使用一行输出，其它的注掉即可 启动filebeat服务 123456启动filebeatsystemctl start filebeat.service查看filebeat状态systemctl status filebeat.service查看filebeat日志tail -f /var/log/filebeat/filebeat 参考链接：https://www.jianshu.com/p/7ca38fa881ae kibana配置点击左上角的Discover按钮，如下图所示，提示创建“index pattern”：如下图，红框中输入filebeat-*，再点击Next step:如下图，下拉框中选择@timestamp，再点击Create index pattern在弹出的页面上，再次点击左上角的Discover按钮，然后点击右上角的Last 15 minutes，如下图：此时页面上会显示最近15分钟内的日志，如果最近15分钟内没有任何日志上报，您也可以点击下图红框中的Today按钮，展示今天的所有日志： 参考链接：https://blog.csdn.net/qq_39284787/article/details/78809538https://blog.csdn.net/boling_cavalry/article/details/79836171https://www.cnblogs.com/CloudMan6/p/7787870.htmlhttps://blog.csdn.net/boling_cavalry/article/details/79950677]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>elk</tag>
      </tags>
  </entry>
</search>
